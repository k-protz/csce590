import numpy as np

def f(x, Q, C):
    """Function to minimize: f(x) = 1/2 * x^T * Q * x - C^T * x + 10"""
    return 0.5 * np.dot(x.T, np.dot(Q, x)) - np.dot(C.T, x) + 10

def grad_f(x, Q, C):
    """Gradient of the function f"""
    return np.dot(Q, x) - C

def steepest_descent(Q, C, x0, epsilon, max_iter):
    """Steepest descent algorithm"""
    x = x0
    iter_count = 0
    table = []
    while iter_count < max_iter:
        grad = grad_f(x, Q, C)
        table.append([iter_count, x[0], x[1], f(x, Q, C)])
        if np.linalg.norm(grad) < epsilon:
            break  # Stopping criterion: gradient norm is below epsilon
        # Update x using steepest descent direction and a suitable step size
        alpha = np.dot(grad, grad) / np.dot(grad, np.dot(Q, grad))
        x = x - alpha * grad
        iter_count += 1
    return table

# Parameters
epsilon = 1e-6
max_iter = 1000

# Case 1: Q = ([20, 5], [5, 2]), C = (14, 6), x0 = (40, -100)
Q1 = np.array([[20, 5], [5, 2]])
C1 = np.array([14, 6])
x0_1 = np.array([40, -100])

# Run steepest descent algorithm
table1 = steepest_descent(Q1, C1, x0_1, epsilon, max_iter)

# Case 2: Q = ([20, 5], [5, 16]), C = (14, 6), x0 = (40, -100)
Q2 = np.array([[20, 5], [5, 16]])
C2 = np.array([14, 6])
x0_2 = np.array([40, -100])

# Run steepest descent algorithm
table2 = steepest_descent(Q2, C2, x0_2, epsilon, max_iter)

# Print results
print("Table for Case 1 (Q = ([20, 5], [5, 2]), C = (14, 6)):")
print("Iter |    x1    |    x2    |   f(x)")
for entry in table1[:10]:
    print(f"{entry[0]:4} | {entry[1]:8.4f} | {entry[2]:8.4f} | {entry[3]:8.4f}")
print("   ...")

for entry in table1[-10:]:
    print(f"{entry[0]:4} | {entry[1]:8.4f} | {entry[2]:8.4f} | {entry[3]:8.4f}")

print("\nTable for Case 2 (Q = ([20, 5], [5, 16]), C = (14, 6)):")
print("Iter |    x1    |    x2    |   f(x)")
for entry in table2[:10]:
    print(f"{entry[0]:4} | {entry[1]:8.4f} | {entry[2]:8.4f} | {entry[3]:8.4f}")
print("   ...")

for entry in table2[-10:]:
    print(f"{entry[0]:4} | {entry[1]:8.4f} | {entry[2]:8.4f} | {entry[3]:8.4f}")
