########## inputs ##########

# Define the graph as an adjacency list
graph = {
    'A': {'B': 5, 'D': 3},
    'B': {'A': 5, 'C': 5, 'F': 5},
    'C': {'B': 5, 'L': 9},
    'D': {'A': 3, 'E': 1, 'G': 4},
    'E': {'D': 1, 'H': 7},
    'F': {'B': 5, 'H': 5, 'I': 6},
    'G': {'D': 4, 'H': 2, 'J': 3},
    'H': {'E': 7, 'F': 5, 'G': 2, 'I': 4, 'K': 2},
    'I': {'F': 6, 'H': 4, 'L': 2},
    'J': {'G': 3, 'K': 1},
    'K': {'H': 2, 'J': 1, 'L': 6},
    'L': {'C': 9, 'I': 2, 'K': 6},    
}

  
########## main ##########

# Find shortest paths from node 'A'
shortest_paths = dijkstra(graph, 'A')

print("Shortest paths from node A:")
for node, distance in shortest_paths.items():
    print(f"Node {node}: Shortest distance = {distance}")


########## functions ##########

def dijkstra(graph, start):
    # Initialize distances to all nodes as infinity, except for the start node as 0
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    
    # Set of visited nodes
    visited = set()
    
    while len(visited) < len(graph):
        # Find the node with the shortest distance among unvisited nodes
        min_dist = float('inf')
        min_node = None
        for node in graph:
            if node not in visited and distances[node] < min_dist:
                min_dist = distances[node]
                min_node = node
        
        visited.add(min_node)
        
        # Update distances to neighbors of the current node
        for neighbor, edge_weight in graph[min_node].items():
            new_dist = distances[min_node] + edge_weight
            if new_dist < distances[neighbor]:
                distances[neighbor] = new_dist
    
    return distances



